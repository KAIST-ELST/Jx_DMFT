sh: 55: source: not found
 DFTforge Version 1.3.0
WARNING: could not import HDF5.Group into _hdf5_implementation
WARNING: could not import HDF5.Dataset into _hdf5_implementation
┌ Warning: Error requiring `HDF5` from `Plots`
│   exception =
│    LoadError: UndefVarError: Group not defined
│    Stacktrace:
│      [1] top-level scope
│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
│      [2] include(mod::Module, _path::String)
│        @ Base ./Base.jl:386
│      [3] include(x::String)
│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
│      [4] top-level scope
│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
│      [5] eval
│        @ ./boot.jl:360 [inlined]
│      [6] eval
│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
│      [7] (::Plots.var"#285#321")()
│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
│      [8] err(f::Any, listener::Module, modname::String)
│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
│      [9] (::Plots.var"#284#320")()
│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
│     [10] withpath(f::Any, path::String)
│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
│     [11] (::Plots.var"#283#319")()
│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
│     [12] listenpkg(f::Any, pkg::Base.PkgId)
│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
│     [13] macro expansion
│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
│     [14] __init__()
│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
│        @ Base ./loading.jl:696
│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
│        @ Base ./loading.jl:782
│     [17] _require(pkg::Base.PkgId)
│        @ Base ./loading.jl:1020
│     [18] require(uuidkey::Base.PkgId)
│        @ Base ./loading.jl:936
│     [19] require(into::Module, mod::Symbol)
│        @ Base ./loading.jl:923
│     [20] include(mod::Module, _path::String)
│        @ Base ./Base.jl:386
│     [21] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:285
│     [22] _start()
│        @ Base ./client.jl:485
│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 2:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
┌ Warning: Error requiring `HDF5` from `Plots`
│   exception =
│    LoadError: UndefVarError: Group not defined
│    Stacktrace:
│      [1] top-level scope
│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
│      [2] include(mod::Module, _path::String)
│        @ Base ./Base.jl:386
│      [3] include(x::String)
│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
│      [4] top-level scope
│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
│      [5] eval
│        @ ./boot.jl:360 [inlined]
│      [6] eval
│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
│      [7] (::Plots.var"#285#321")()
│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
│      [8] err(f::Any, listener::Module, modname::String)
│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
│      [9] (::Plots.var"#284#320")()
│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
│     [10] withpath(f::Any, path::String)
│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
│     [11] (::Plots.var"#283#319")()
│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
│     [12] listenpkg(f::Any, pkg::Base.PkgId)
│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
│     [13] macro expansion
│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
│     [14] __init__()
│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
│        @ Base ./loading.jl:696
│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
│        @ Base ./loading.jl:782
│     [17] _require(pkg::Base.PkgId)
│        @ Base ./loading.jl:1020
│     [18] require(uuidkey::Base.PkgId)
│        @ Base ./loading.jl:936
│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
│        @ Distributed ./task.jl:411
│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 31:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 31:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 11:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 11:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 49:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 49:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 45:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 45:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 30:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 30:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 43:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 43:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 52:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 52:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 39:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 39:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 24:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 24:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 5:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 5:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 50:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 50:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 44:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 44:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 48:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 48:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 8:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 8:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 33:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 33:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 9:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 9:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 4:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 4:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 56:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 56:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 12:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 12:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 55:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 55:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 3:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 3:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 47:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 47:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 53:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 53:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 14:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 14:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 29:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 29:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 37:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 37:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 51:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 51:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 42:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 42:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 17:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 17:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 19:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 19:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 27:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 27:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 18:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 18:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 28:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 28:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 23:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 23:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 57:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 57:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 38:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 38:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 40:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 40:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 20:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 20:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 32:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 32:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 54:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 54:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 10:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 10:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 16:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 16:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 26:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 26:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 13:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 13:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 41:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 41:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 46:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 46:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 6:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 6:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 34:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 34:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 7:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 7:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 36:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 36:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 22:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 22:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 15:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 15:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 25:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 25:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 21:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 21:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 35:	WARNING: could not import HDF5.Group into _hdf5_implementation
      From worker 35:	WARNING: could not import HDF5.Dataset into _hdf5_implementation
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
      From worker 2:	┌ Warning: Error requiring `HDF5` from `Plots`
      From worker 2:	│   exception =
      From worker 2:	│    LoadError: UndefVarError: Group not defined
      From worker 2:	│    Stacktrace:
      From worker 2:	│      [1] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:161
      From worker 2:	│      [2] include(mod::Module, _path::String)
      From worker 2:	│        @ Base ./Base.jl:386
      From worker 2:	│      [3] include(x::String)
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1
      From worker 2:	│      [4] top-level scope
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/init.jl:46
      From worker 2:	│      [5] eval
      From worker 2:	│        @ ./boot.jl:360 [inlined]
      From worker 2:	│      [6] eval
      From worker 2:	│        @ ~/.julia/packages/Plots/HcxwM/src/Plots.jl:1 [inlined]
      From worker 2:	│      [7] (::Plots.var"#285#321")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:99
      From worker 2:	│      [8] err(f::Any, listener::Module, modname::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47
      From worker 2:	│      [9] (::Plots.var"#284#320")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:98
      From worker 2:	│     [10] withpath(f::Any, path::String)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37
      From worker 2:	│     [11] (::Plots.var"#283#319")()
      From worker 2:	│        @ Plots ~/.julia/packages/Requires/7Ncym/src/require.jl:97
      From worker 2:	│     [12] listenpkg(f::Any, pkg::Base.PkgId)
      From worker 2:	│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:20
      From worker 2:	│     [13] macro expansion
      From worker 2:	│        @ ~/.julia/packages/Requires/7Ncym/src/require.jl:95 [inlined]
      From worker 2:	│     [14] __init__()
      From worker 2:	│        @ Plots ~/.julia/packages/Plots/HcxwM/src/init.jl:44
      From worker 2:	│     [15] _include_from_serialized(path::String, depmods::Vector{Any})
      From worker 2:	│        @ Base ./loading.jl:696
      From worker 2:	│     [16] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
      From worker 2:	│        @ Base ./loading.jl:782
      From worker 2:	│     [17] _require(pkg::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:1020
      From worker 2:	│     [18] require(uuidkey::Base.PkgId)
      From worker 2:	│        @ Base ./loading.jl:936
      From worker 2:	│     [19] (::Distributed.var"#1#2"{Base.PkgId})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/Distributed.jl:79
      From worker 2:	│     [20] (::Distributed.var"#103#104"{Distributed.CallMsg{:call}})()
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:274
      From worker 2:	│     [21] run_work_thunk(thunk::Distributed.var"#103#104"{Distributed.CallMsg{:call}}, print_error::Bool)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:63
      From worker 2:	│     [22] run_work_thunk(rv::Distributed.RemoteValue, thunk::Function)
      From worker 2:	│        @ Distributed /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:72
      From worker 2:	│     [23] (::Distributed.var"#96#98"{Distributed.RemoteValue, Distributed.var"#103#104"{Distributed.CallMsg{:call}}})()
      From worker 2:	│        @ Distributed ./task.jl:411
      From worker 2:	│    in expression starting at /home/users1/xorwndekda/.julia/packages/Plots/HcxwM/src/backends/hdf5.jl:36
      From worker 2:	└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49
 JX_VERSION: 0.9.3-pub+20190529
 Visit https://kaist-elst.github.io/DFTforge.jl/ for details & updates 
 Tested with Julia v1.0 and v1.1 which the most recent version of Julia in 201906 https://julialang.org/
 TOML file: fe_J_wannier.toml
/home/users1/xorwndekda/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/wannier_hr.dat
/home/users1/xorwndekda/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/wannier.win
/home/users1/xorwndekda/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/wannier_hr.dat
/home/users1/xorwndekda/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/wannier.win
Dict("result_file_up" => "/home/users1/xorwndekda/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/wannier", "result_file_down" => "/home/users1/xorwndekda/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/wannier")
DFTforge.DFTcommon.Wannier_OptionalInfo(1, [0.0 0.0 0.0], Array{Int64, N} where N[[1, 2, 3, 4, 5, 6, 7, 8, 9]])
Union{Vector{Float64}, Vector{String}}[[0.0, 0.0, 0.0], [0.5, 0.0, 0.0], ["G", "M"]]
Union{Vector{Float64}, Vector{String}}[[0.5, 0.0, 0.0], [0.33333333, 0.33333333, 0.0], ["M", "K"]]
Union{Vector{Float64}, Vector{String}}[[0.33333333, 0.33333333, 0.0], [0.0, 0.0, 0.0], ["K", "G"]]
Union{Vector{Float64}, Vector{String}}[[0.0, 0.0, 0.0], [0.0, 0.0, 0.5], ["G", "A"]]
Union{Vector{Float64}, Vector{String}}[[0.0, 0.0, 0.5], [0.5, 0.0, 0.5], ["A", "L"]]
Union{Vector{Float64}, Vector{String}}[[0.5, 0.0, 0.5], [0.33333333, 0.33333333, 0.5], ["L", "H"]]
Union{Vector{Float64}, Vector{String}}[[0.33333333, 0.33333333, 0.5], [0.0, 0.0, 0.5], ["H", "A"]]
Union{Vector{Float64}, Vector{String}}[[0.0, 0.0, 0.5], [0.5, 0.0, 0.5], ["A", "L"]]
Union{Vector{Float64}, Vector{String}}[[0.5, 0.0, 0.5], [0.5, 0.0, 0.0], ["L", "M"]]
Union{Vector{Float64}, Vector{String}}[[0.5, 0.0, 0.0], [0.33333333, 0.33333333, 0.0], ["M", "K"]]
Union{Vector{Float64}, Vector{String}}[[0.33333333, 0.33333333, 0.0], [0.33333333, 0.33333333, 0.5], ["K", "H"]]
 result file is not found result_file_up	/home/users1/xorwndekda/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/wannier
 result file is not found result_file_down	/home/users1/xorwndekda/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/wannier
Array{Int64, N} where N[[]] AbstractString["all"]
Array{Int64, N} where N[[]] AbstractString["all"]
Array{Int64, N} where N[[]] AbstractString["all"]
Array{Int64, N} where N[[]] AbstractString["all"]
================================================================
energy windows
energywindow_all_list: Vector{Float64}[]
energywindow_1_list: Vector{Float64}[]
energywindow_2_list: Vector{Float64}[]
energywindow_3_list: Vector{Float64}[]
energywindow_4_list: Vector{Float64}[]
================================================================
atom12_list: [(1, 1)]
q_point_num [18, 18, 18]	k_point_num [18, 18, 18]
DFT_type Wannier90
orbital_selection_option nomask
mask1list Array{Int64, N} where N[[]]	mask2list Array{Int64, N} where N[[]]
basisTransformbasisTransform_rule_type(false, Dict{Int64, orbital_rot_type}(), false, Dict{Int64, orbital_downfold_type}(), true, true, Vector{Any}[], custom_transfrom_type[])
jx.col.dmft.spin.wannier_0.0/wannier.hdf5
================================================================
set_current_dftdataset:3
/home/users1/xorwndekda/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/wannier.win
fermi_energy = 0.0
/home/users1/xorwndekda/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/wannier.win
fermi_energy = 0.0
 basisTransform_init 
 atomnum_eff 1 orbitalNums_eff [9]
 orbitalStartIdx_list [0]
      From worker 2:	set_current_dftdataset:5
      From worker 32:	set_current_dftdataset:5
      From worker 47:	set_current_dftdataset:5
      From worker 3:	set_current_dftdataset:5
      From worker 31:	set_current_dftdataset:5
      From worker 56:	set_current_dftdataset:5
      From worker 45:	set_current_dftdataset:5
      From worker 51:	set_current_dftdataset:5
      From worker 23:	set_current_dftdataset:5
      From worker 48:	set_current_dftdataset:5
      From worker 35:	set_current_dftdataset:5
      From worker 9:	set_current_dftdataset:5
      From worker 52:	set_current_dftdataset:5
      From worker 8:	set_current_dftdataset:5
      From worker 4:	set_current_dftdataset:5
      From worker 17:	set_current_dftdataset:5
      From worker 13:	set_current_dftdataset:5
      From worker 12:	set_current_dftdataset:5
      From worker 6:	set_current_dftdataset:5
      From worker 11:	set_current_dftdataset:5
      From worker 27:	set_current_dftdataset:5
      From worker 30:	set_current_dftdataset:5
      From worker 41:	set_current_dftdataset:5
      From worker 25:	set_current_dftdataset:5
      From worker 42:	set_current_dftdataset:5
      From worker 29:	set_current_dftdataset:5
      From worker 34:	set_current_dftdataset:5
      From worker 49:	set_current_dftdataset:5
      From worker 53:	set_current_dftdataset:5
      From worker 38:	set_current_dftdataset:5
      From worker 15:	set_current_dftdataset:5
      From worker 40:	set_current_dftdataset:5
      From worker 24:	set_current_dftdataset:5
      From worker 36:	set_current_dftdataset:5
      From worker 10:	set_current_dftdataset:5
      From worker 22:	set_current_dftdataset:5
      From worker 43:	set_current_dftdataset:5
      From worker 46:	set_current_dftdataset:5
      From worker 7:	set_current_dftdataset:5
      From worker 28:	set_current_dftdataset:5
      From worker 16:	set_current_dftdataset:5
      From worker 55:	set_current_dftdataset:5
      From worker 37:	set_current_dftdataset:5
      From worker 44:	set_current_dftdataset:5
      From worker 57:	set_current_dftdataset:5
      From worker 18:	set_current_dftdataset:5
      From worker 5:	set_current_dftdataset:5
      From worker 19:	set_current_dftdataset:5
      From worker 33:	set_current_dftdataset:5
      From worker 50:	set_current_dftdataset:5
      From worker 20:	set_current_dftdataset:5
      From worker 14:	set_current_dftdataset:5
      From worker 26:	set_current_dftdataset:5
      From worker 54:	set_current_dftdataset:5
      From worker 39:	set_current_dftdataset:5
      From worker 21:	set_current_dftdataset:5
Any[] String[] DMFT :true, Jx :false
┌ Warning: Assignment to `DMFT_loop` in soft scope is ambiguous because a global variable by the same name exists: `DMFT_loop` will be treated as a new local. Disambiguate by using `local DMFT_loop` to suppress this warning or `global DMFT_loop` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5221
┌ Warning: Assignment to `SelfE_w_new` in soft scope is ambiguous because a global variable by the same name exists: `SelfE_w_new` will be treated as a new local. Disambiguate by using `local SelfE_w_new` to suppress this warning or `global SelfE_w_new` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5229
┌ Warning: Assignment to `imp_totN` in soft scope is ambiguous because a global variable by the same name exists: `imp_totN` will be treated as a new local. Disambiguate by using `local imp_totN` to suppress this warning or `global imp_totN` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5268
┌ Warning: Assignment to `imp_dc` in soft scope is ambiguous because a global variable by the same name exists: `imp_dc` will be treated as a new local. Disambiguate by using `local imp_dc` to suppress this warning or `global imp_dc` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5269
┌ Warning: Assignment to `init_mu` in soft scope is ambiguous because a global variable by the same name exists: `init_mu` will be treated as a new local. Disambiguate by using `local init_mu` to suppress this warning or `global init_mu` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5284
┌ Warning: Assignment to `mu` in soft scope is ambiguous because a global variable by the same name exists: `mu` will be treated as a new local. Disambiguate by using `local mu` to suppress this warning or `global mu` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5287
┌ Warning: Assignment to `Occup` in soft scope is ambiguous because a global variable by the same name exists: `Occup` will be treated as a new local. Disambiguate by using `local Occup` to suppress this warning or `global Occup` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5287
┌ Warning: Assignment to `H_loc` in soft scope is ambiguous because a global variable by the same name exists: `H_loc` will be treated as a new local. Disambiguate by using `local H_loc` to suppress this warning or `global H_loc` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5287
┌ Warning: Assignment to `G_loc_iWn` in soft scope is ambiguous because a global variable by the same name exists: `G_loc_iWn` will be treated as a new local. Disambiguate by using `local G_loc_iWn` to suppress this warning or `global G_loc_iWn` to assign to the existing global variable.
└ @ timing.jl:210
┌ Warning: Assignment to `red_G_loc_iWn` in soft scope is ambiguous because a global variable by the same name exists: `red_G_loc_iWn` will be treated as a new local. Disambiguate by using `local red_G_loc_iWn` to suppress this warning or `global red_G_loc_iWn` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5312
┌ Warning: Assignment to `G_loc_iWn_mat` in soft scope is ambiguous because a global variable by the same name exists: `G_loc_iWn_mat` will be treated as a new local. Disambiguate by using `local G_loc_iWn_mat` to suppress this warning or `global G_loc_iWn_mat` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5318
┌ Warning: Assignment to `InvWiess_iWn_mat` in soft scope is ambiguous because a global variable by the same name exists: `InvWiess_iWn_mat` will be treated as a new local. Disambiguate by using `local InvWiess_iWn_mat` to suppress this warning or `global InvWiess_iWn_mat` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5319
┌ Warning: Assignment to `hyb_iWn_mat` in soft scope is ambiguous because a global variable by the same name exists: `hyb_iWn_mat` will be treated as a new local. Disambiguate by using `local hyb_iWn_mat` to suppress this warning or `global hyb_iWn_mat` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5320
┌ Warning: Assignment to `InvWiess_iWn` in soft scope is ambiguous because a global variable by the same name exists: `InvWiess_iWn` will be treated as a new local. Disambiguate by using `local InvWiess_iWn` to suppress this warning or `global InvWiess_iWn` to assign to the existing global variable.
└ @ timing.jl:210
┌ Warning: Assignment to `hyb_iWn` in soft scope is ambiguous because a global variable by the same name exists: `hyb_iWn` will be treated as a new local. Disambiguate by using `local hyb_iWn` to suppress this warning or `global hyb_iWn` to assign to the existing global variable.
└ @ timing.jl:210
┌ Warning: Assignment to `hyb` in soft scope is ambiguous because a global variable by the same name exists: `hyb` will be treated as a new local. Disambiguate by using `local hyb` to suppress this warning or `global hyb` to assign to the existing global variable.
└ @ ~/com/codepaper/examples/reasonable_set2/Fe/SCF_DMFT/Jx_DMFT.jl:5342
#####################################################
      Calculation type : self-consistent DMFT        
#####################################################



  1.043804 seconds (313.85 k allocations: 18.454 MiB, 56.37% gc time, 72.01% compilation time)
  0.163461 seconds (82.86 k allocations: 4.917 MiB, 35.06% compilation time)
  0.408249 seconds (86.31 k allocations: 5.167 MiB, 17.23% compilation time)





                 =============================================  
                 ================    Jx DMFT  ================  
                 =============================================  



------------- input -------------
K-points grid : [10, 10, 10]
R-points grid : [10, 10, 10]
iW_grid_cut : 300.0
Temperature : 386.0
DMFT spin type : 2
Correlated atoms : [1]
Correlated atoms equiv. : [1]

Green-function basis : matsubara
Solver green cut w: 10.0
Solver Measure time: 20.0
Solver thermalization time: 1.0
First smth. step for self energy: 0
Cal. susc. ?: false
initial bias of selfE for spin-polarized : +/-0.5
self-energy simple mixing ratio of old selfE : 0.5

transform basis ?: false
consider degeneracy ?: true

double counting type: FLL-DFT

                imp [1]
U     : 2.71
J     : 1.0
interaction type  :ising
interaction parameterisation  :slater-condon
dc_n0 : 6.0,   [ nominal DC (eV) : 12.405 ]
imp-1 index :
            [1, 0, 0, 0, 0]
            [0, 2, 0, 0, 0]
            [0, 0, 3, 0, 0]
            [0, 0, 0, 4, 0]
            [0, 0, 0, 0, 5]

------------- input -------------

===== loading H_k from tight-binding parameter ... ======
 61.292210 seconds (57.63 M allocations: 29.199 GiB, 3.97% gc time, 8.64% compilation time)
  0.497797 seconds (207.58 k allocations: 150.751 MiB, 10.37% compilation time)


  0.332760 seconds (201.17 k allocations: 15.875 MiB, 16.56% compilation time)
  0.149430 seconds (94.47 k allocations: 31.205 MiB, 7.08% compilation time)
===== Start to calculate wannier occupancy in real frequency ... ======
Passed all variables to calculate G(w) ... 
      From worker 2:	Calculating G(w) ...   20%  done
      From worker 56:	Calculating G(w) ...   20%  done
      From worker 55:	Calculating G(w) ...   40%  done
      From worker 15:	Calculating G(w) ...   40%  done
      From worker 33:	Calculating G(w) ...   60%  done
      From worker 51:	Calculating G(w) ...   60%  done
      From worker 47:	Calculating G(w) ...   80%  done
      From worker 41:	Calculating G(w) ...   80%  done
      From worker 23:	Calculating G(w) ...   100%  done
      From worker 42:	Calculating G(w) ...   100%  done


For non-mag cal, total d-orbital occupation 5 !
===============================================
orb-5, occup : 0.6802804961778349
orb-6, occup : 0.6802829398480658
orb-7, occup : 0.6027141803758471
orb-8, occup : 0.6802829398480658
orb-9, occup : 0.6027106286493944
--------------------------------------
latt-1, occup(up+dn) : 6.492542369798404
======================================

*------------------------------------*
Wannier-Tot-occup(up+dn):8.005745658533364
*------------------------------------*
----------------------------------------------------
Inequv. orbital index of imp. 1 :[5, 6, 7, 8, 9]
Diagonal part of Hloc : [-12.734780999999979, -12.734806000000004, -13.061174999999992, -12.734805999999995, -13.061173000000018]


  0.338377 seconds (444.96 k allocations: 29.780 MiB, 98.98% compilation time)
  2.077094 seconds (6.66 M allocations: 348.936 MiB, 99.57% compilation time)
  0.060595 seconds (77.47 k allocations: 12.241 MiB, 90.90% compilation time)
===== SelfE = imp_dc block initialize ... ===== 
Impurity [1] : orbital # :5,    Spin type :2

          ===== Finding mu ... =====
========= Chemical potential finding in range [-1.0,1.0] ==========
 [  1 ] Test mu :  -1.0000000  ==>  Occup :   5.753206  |  target N :  8.0 
 [  2 ] Test mu :   1.0000000  ==>  Occup :  10.462096  |  target N :  8.0 
 [  3 ] Test mu :  -0.0457230  ==>  Occup :   7.810976  |  target N :  8.0 
 [  4 ] Test mu :   0.0288370  ==>  Occup :   8.133456  |  target N :  8.0 
 [  5 ] Test mu :  -0.0020191  ==>  Occup :   8.004511  |  target N :  8.0 
 [  6 ] Test mu :  -0.0030669  ==>  Occup :   8.000014  |  target N :  8.0 
 [  7 ] Test mu :  -0.0030702  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :-0.00307018107517753
-----------------------------------------------------------------------

141.761691 seconds (5.64 M allocations: 541.621 MiB, 1.05% compilation time)
-------------------------------------
Initial latt. mu in transform basis :-0.00307018107517753
-------------------------------------

 == You turned on the 'consider_degeneracy = true', so from now on degenerate states will be considered equivalently == 

Old imp ind :
             imp-1
                        [1, 0, 0, 0, 0]
                        [0, 2, 0, 0, 0]
                        [0, 0, 3, 0, 0]
                        [0, 0, 0, 4, 0]
                        [0, 0, 0, 0, 5]

New imp ind :
             imp-1
                        [1, 0, 0, 0, 0]
                        [0, 1, 0, 0, 0]
                        [0, 0, 2, 0, 0]
                        [0, 0, 0, 1, 0]
                        [0, 0, 0, 0, 2]

 == You turn on the consider_degeneracy = true, so from now on degenerate states will be considered equivalently == 

===== SelfE = imp_dc block initialize ... ===== 
Impurity [1] : orbital # :2,    Spin type :2

          ===== Finding mu ... =====
========= Chemical potential finding in range [-15.0,15.0] ==========
 [  1 ] Test mu : -15.0000000  ==>  Occup :   0.002244  |  target N :  8.0 
 [  2 ] Test mu :  15.0000000  ==>  Occup :  14.287599  |  target N :  8.0 
 [  3 ] Test mu :   1.7956968  ==>  Occup :   9.871873  |  target N :  8.0 
 [  4 ] Test mu :  -1.3897664  ==>  Occup :   3.391469  |  target N :  8.0 
 [  5 ] Test mu :   0.8755653  ==>  Occup :   7.708768  |  target N :  8.0 
 [  6 ] Test mu :   1.0029813  ==>  Occup :   8.055187  |  target N :  8.0 
 [  7 ] Test mu :   0.9825455  ==>  Occup :   8.003496  |  target N :  8.0 
 [  8 ] Test mu :   0.9811870  ==>  Occup :   7.999909  |  target N :  8.0 
 [  9 ] Test mu :   0.9812214  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.9812214280887434
-----------------------------------------------------------------------

168.244828 seconds (1.28 M allocations: 361.627 MiB)
-------------------------
Initial latt. mu :0.9812214280887434
-------------------------
===== Calculating local green function ... =====
  8.884577 seconds (1.47 M allocations: 103.575 MiB, 6.00% compilation time)


===== Calculating weiss field from G_loc_iWn ... =====
  1.748484 seconds (1.87 M allocations: 107.274 MiB, 38.22% compilation time)

===== Calculating hybrid function from weiss field ... =====
  0.204740 seconds (342.43 k allocations: 21.026 MiB, 96.14% compilation time)

Writing hyb.json ...
Writing hyb.json ...
Writing params.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [1] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-15.0,15.0] ==========
 [  1 ] Test mu : -15.0000000  ==>  Occup :   0.040605  |  target N :  8.0 
 [  2 ] Test mu :  15.0000000  ==>  Occup :  14.270299  |  target N :  8.0 
 [  3 ] Test mu :   1.7805468  ==>  Occup :   9.234936  |  target N :  8.0 
 [  4 ] Test mu :  -0.4733255  ==>  Occup :   5.426947  |  target N :  8.0 
 [  5 ] Test mu :   1.0496130  ==>  Occup :   8.271104  |  target N :  8.0 
 [  6 ] Test mu :   0.8775969  ==>  Occup :   8.051132  |  target N :  8.0 
 [  7 ] Test mu :   0.8397186  ==>  Occup :   8.001780  |  target N :  8.0 
 [  8 ] Test mu :   0.8383693  ==>  Occup :   8.000134  |  target N :  8.0 
 [  9 ] Test mu :   0.8382597  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.8382597037559459
-----------------------------------------------------------------------

168.033054 seconds (1.28 M allocations: 361.621 MiB)
===== Calculating local green function ... =====
  8.099169 seconds (208.14 k allocations: 26.270 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.157148 seconds (176.82 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007712 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [2] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [0.13825970375594598,1.538259703755946] ==========
 [  1 ] Test mu :   0.1382597  ==>  Occup :   7.384500  |  target N :  8.0 
 [  2 ] Test mu :   1.5382597  ==>  Occup :   8.716890  |  target N :  8.0 
 [  3 ] Test mu :   0.7849918  ==>  Occup :   8.116446  |  target N :  8.0 
 [  4 ] Test mu :   0.6821028  ==>  Occup :   8.042151  |  target N :  8.0 
 [  5 ] Test mu :   0.6472459  ==>  Occup :   8.008986  |  target N :  8.0 
 [  6 ] Test mu :   0.6381476  ==>  Occup :   7.999540  |  target N :  8.0 
 [  7 ] Test mu :   0.6385837  ==>  Occup :   7.999997  |  target N :  8.0 
 [  8 ] Test mu :   0.6385863  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6385862683587848
-----------------------------------------------------------------------

149.094772 seconds (1.14 M allocations: 316.352 MiB)
===== Calculating local green function ... =====
  8.100844 seconds (208.21 k allocations: 26.272 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.164883 seconds (176.82 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.008059 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [3] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06141373164121511,1.3385862683587848] ==========
 [  1 ] Test mu :  -0.0614137  ==>  Occup :   7.037027  |  target N :  8.0 
 [  2 ] Test mu :   1.3385863  ==>  Occup :   8.569541  |  target N :  8.0 
 [  3 ] Test mu :   0.8182925  ==>  Occup :   8.141697  |  target N :  8.0 
 [  4 ] Test mu :   0.7054524  ==>  Occup :   8.060353  |  target N :  8.0 
 [  5 ] Test mu :   0.6602245  ==>  Occup :   8.021527  |  target N :  8.0 
 [  6 ] Test mu :   0.6365438  ==>  Occup :   7.998395  |  target N :  8.0 
 [  7 ] Test mu :   0.6381193  ==>  Occup :   7.999973  |  target N :  8.0 
 [  8 ] Test mu :   0.6381468  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6381467776873787
-----------------------------------------------------------------------

149.021485 seconds (1.14 M allocations: 316.356 MiB)
===== Calculating local green function ... =====
  8.112849 seconds (208.21 k allocations: 26.269 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.154434 seconds (176.81 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007690 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [4] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06185322231262125,1.3381467776873786] ==========
 [  1 ] Test mu :  -0.0618532  ==>  Occup :   7.042521  |  target N :  8.0 
 [  2 ] Test mu :   1.3381468  ==>  Occup :   8.567737  |  target N :  8.0 
 [  3 ] Test mu :   0.8170187  ==>  Occup :   8.142198  |  target N :  8.0 
 [  4 ] Test mu :   0.7033721  ==>  Occup :   8.059836  |  target N :  8.0 
 [  5 ] Test mu :   0.6583633  ==>  Occup :   8.021155  |  target N :  8.0 
 [  6 ] Test mu :   0.6350866  ==>  Occup :   7.998684  |  target N :  8.0 
 [  7 ] Test mu :   0.6363998  ==>  Occup :   7.999980  |  target N :  8.0 
 [  8 ] Test mu :   0.6364206  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6364205954164913
-----------------------------------------------------------------------

149.044304 seconds (1.14 M allocations: 316.346 MiB)
===== Calculating local green function ... =====
  8.091674 seconds (208.22 k allocations: 26.272 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.151045 seconds (176.81 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007758 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [5] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06357940458350864,1.3364205954164912] ==========
 [  1 ] Test mu :  -0.0635794  ==>  Occup :   7.038672  |  target N :  8.0 
 [  2 ] Test mu :   1.3364206  ==>  Occup :   8.566069  |  target N :  8.0 
 [  3 ] Test mu :   0.8175661  ==>  Occup :   8.142274  |  target N :  8.0 
 [  4 ] Test mu :   0.7039700  ==>  Occup :   8.059658  |  target N :  8.0 
 [  5 ] Test mu :   0.6591206  ==>  Occup :   8.021128  |  target N :  8.0 
 [  6 ] Test mu :   0.6358540  ==>  Occup :   7.998851  |  target N :  8.0 
 [  7 ] Test mu :   0.6370121  ==>  Occup :   7.999983  |  target N :  8.0 
 [  8 ] Test mu :   0.6370299  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6370299426494958
-----------------------------------------------------------------------

148.974294 seconds (1.14 M allocations: 316.351 MiB)
===== Calculating local green function ... =====
  8.116049 seconds (208.22 k allocations: 26.272 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.157281 seconds (176.81 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007635 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [6] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.0629700573505042,1.3370299426494956] ==========
 [  1 ] Test mu :  -0.0629701  ==>  Occup :   7.042029  |  target N :  8.0 
 [  2 ] Test mu :   1.3370299  ==>  Occup :   8.565734  |  target N :  8.0 
 [  3 ] Test mu :   0.8172262  ==>  Occup :   8.142473  |  target N :  8.0 
 [  4 ] Test mu :   0.7032689  ==>  Occup :   8.059576  |  target N :  8.0 
 [  5 ] Test mu :   0.6584068  ==>  Occup :   8.021209  |  target N :  8.0 
 [  6 ] Test mu :   0.6349496  ==>  Occup :   7.998894  |  target N :  8.0 
 [  7 ] Test mu :   0.6360723  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6360890  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.636089019669038
-----------------------------------------------------------------------

148.931116 seconds (1.14 M allocations: 316.353 MiB)
===== Calculating local green function ... =====
  8.073314 seconds (208.18 k allocations: 26.268 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.153249 seconds (176.81 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007575 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [7] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06391098033096199,1.3360890196690378] ==========
 [  1 ] Test mu :  -0.0639110  ==>  Occup :   7.036839  |  target N :  8.0 
 [  2 ] Test mu :   1.3360890  ==>  Occup :   8.564967  |  target N :  8.0 
 [  3 ] Test mu :   0.8184917  ==>  Occup :   8.143154  |  target N :  8.0 
 [  4 ] Test mu :   0.7043118  ==>  Occup :   8.060216  |  target N :  8.0 
 [  5 ] Test mu :   0.6591091  ==>  Occup :   8.021727  |  target N :  8.0 
 [  6 ] Test mu :   0.6350043  ==>  Occup :   7.998887  |  target N :  8.0 
 [  7 ] Test mu :   0.6361376  ==>  Occup :   7.999983  |  target N :  8.0 
 [  8 ] Test mu :   0.6361549  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6361548715441034
-----------------------------------------------------------------------

149.032932 seconds (1.14 M allocations: 316.348 MiB)
===== Calculating local green function ... =====
  8.083178 seconds (208.14 k allocations: 26.270 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.154775 seconds (176.82 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007673 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [8] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06384512845589652,1.3361548715441034] ==========
 [  1 ] Test mu :  -0.0638451  ==>  Occup :   7.036472  |  target N :  8.0 
 [  2 ] Test mu :   1.3361549  ==>  Occup :   8.565257  |  target N :  8.0 
 [  3 ] Test mu :   0.8185156  ==>  Occup :   8.143288  |  target N :  8.0 
 [  4 ] Test mu :   0.7042852  ==>  Occup :   8.060452  |  target N :  8.0 
 [  5 ] Test mu :   0.6589378  ==>  Occup :   8.021875  |  target N :  8.0 
 [  6 ] Test mu :   0.6346587  ==>  Occup :   7.998873  |  target N :  8.0 
 [  7 ] Test mu :   0.6358067  ==>  Occup :   7.999983  |  target N :  8.0 
 [  8 ] Test mu :   0.6358246  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6358246270276715
-----------------------------------------------------------------------

148.801454 seconds (1.14 M allocations: 316.356 MiB)
===== Calculating local green function ... =====
  8.071579 seconds (208.21 k allocations: 26.272 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.154992 seconds (176.81 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007623 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [9] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06417537297232845,1.3358246270276715] ==========
 [  1 ] Test mu :  -0.0641754  ==>  Occup :   7.033623  |  target N :  8.0 
 [  2 ] Test mu :   1.3358246  ==>  Occup :   8.565024  |  target N :  8.0 
 [  3 ] Test mu :   0.8192815  ==>  Occup :   8.143084  |  target N :  8.0 
 [  4 ] Test mu :   0.7053452  ==>  Occup :   8.060368  |  target N :  8.0 
 [  5 ] Test mu :   0.6601008  ==>  Occup :   8.021777  |  target N :  8.0 
 [  6 ] Test mu :   0.6359858  ==>  Occup :   7.998916  |  target N :  8.0 
 [  7 ] Test mu :   0.6370895  ==>  Occup :   7.999983  |  target N :  8.0 
 [  8 ] Test mu :   0.6371070  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.637107025958369
-----------------------------------------------------------------------

148.961219 seconds (1.14 M allocations: 316.361 MiB)
===== Calculating local green function ... =====
  8.092836 seconds (208.20 k allocations: 26.268 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.157069 seconds (176.81 k allocations: 9.297 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007984 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [10] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06289297404163097,1.3371070259583688] ==========
 [  1 ] Test mu :  -0.0628930  ==>  Occup :   7.038427  |  target N :  8.0 
 [  2 ] Test mu :   1.3371070  ==>  Occup :   8.565910  |  target N :  8.0 
 [  3 ] Test mu :   0.8184275  ==>  Occup :   8.142721  |  target N :  8.0 
 [  4 ] Test mu :   0.7045234  ==>  Occup :   8.060115  |  target N :  8.0 
 [  5 ] Test mu :   0.6593693  ==>  Occup :   8.021593  |  target N :  8.0 
 [  6 ] Test mu :   0.6354566  ==>  Occup :   7.998924  |  target N :  8.0 
 [  7 ] Test mu :   0.6365532  ==>  Occup :   7.999983  |  target N :  8.0 
 [  8 ] Test mu :   0.6365703  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6365703109066339
-----------------------------------------------------------------------

148.911522 seconds (1.14 M allocations: 316.350 MiB)
===== Calculating local green function ... =====
  8.068957 seconds (208.14 k allocations: 26.270 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.155250 seconds (176.82 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007588 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [11] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.0634296890933661,1.3365703109066338] ==========
 [  1 ] Test mu :  -0.0634297  ==>  Occup :   7.037827  |  target N :  8.0 
 [  2 ] Test mu :   1.3365703  ==>  Occup :   8.565710  |  target N :  8.0 
 [  3 ] Test mu :   0.8182100  ==>  Occup :   8.142484  |  target N :  8.0 
 [  4 ] Test mu :   0.7044921  ==>  Occup :   8.059841  |  target N :  8.0 
 [  5 ] Test mu :   0.6595287  ==>  Occup :   8.021421  |  target N :  8.0 
 [  6 ] Test mu :   0.6358292  ==>  Occup :   7.998962  |  target N :  8.0 
 [  7 ] Test mu :   0.6368873  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6369035  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6369035405089553
-----------------------------------------------------------------------

149.005983 seconds (1.14 M allocations: 316.351 MiB)
===== Calculating local green function ... =====
  8.034679 seconds (208.16 k allocations: 26.270 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.161764 seconds (176.82 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007661 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [12] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.0630964594910447,1.3369035405089553] ==========
 [  1 ] Test mu :  -0.0630965  ==>  Occup :   7.040953  |  target N :  8.0 
 [  2 ] Test mu :   1.3369035  ==>  Occup :   8.565518  |  target N :  8.0 
 [  3 ] Test mu :   0.8175912  ==>  Occup :   8.143328  |  target N :  8.0 
 [  4 ] Test mu :   0.7030865  ==>  Occup :   8.060147  |  target N :  8.0 
 [  5 ] Test mu :   0.6578706  ==>  Occup :   8.021546  |  target N :  8.0 
 [  6 ] Test mu :   0.6340200  ==>  Occup :   7.998934  |  target N :  8.0 
 [  7 ] Test mu :   0.6351065  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6351229  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6351228802874461
-----------------------------------------------------------------------

148.880754 seconds (1.14 M allocations: 316.355 MiB)
===== Calculating local green function ... =====
  8.082831 seconds (208.21 k allocations: 26.269 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.155137 seconds (176.82 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007646 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [13] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06487711971255383,1.3351228802874462] ==========
 [  1 ] Test mu :  -0.0648771  ==>  Occup :   7.033571  |  target N :  8.0 
 [  2 ] Test mu :   1.3351229  ==>  Occup :   8.564278  |  target N :  8.0 
 [  3 ] Test mu :   0.8190292  ==>  Occup :   8.143787  |  target N :  8.0 
 [  4 ] Test mu :   0.7045524  ==>  Occup :   8.060718  |  target N :  8.0 
 [  5 ] Test mu :   0.6590692  ==>  Occup :   8.021964  |  target N :  8.0 
 [  6 ] Test mu :   0.6347334  ==>  Occup :   7.998882  |  target N :  8.0 
 [  7 ] Test mu :   0.6358706  ==>  Occup :   7.999983  |  target N :  8.0 
 [  8 ] Test mu :   0.6358884  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6358883749636929
-----------------------------------------------------------------------

148.898866 seconds (1.14 M allocations: 316.351 MiB)
===== Calculating local green function ... =====
  8.069850 seconds (208.14 k allocations: 26.270 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.166415 seconds (176.82 k allocations: 9.297 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007502 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [14] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06411162503630707,1.3358883749636927] ==========
 [  1 ] Test mu :  -0.0641116  ==>  Occup :   7.032576  |  target N :  8.0 
 [  2 ] Test mu :   1.3358884  ==>  Occup :   8.564829  |  target N :  8.0 
 [  3 ] Test mu :   0.8198115  ==>  Occup :   8.143449  |  target N :  8.0 
 [  4 ] Test mu :   0.7056693  ==>  Occup :   8.060678  |  target N :  8.0 
 [  5 ] Test mu :   0.6602378  ==>  Occup :   8.021959  |  target N :  8.0 
 [  6 ] Test mu :   0.6359141  ==>  Occup :   7.998885  |  target N :  8.0 
 [  7 ] Test mu :   0.6370480  ==>  Occup :   7.999982  |  target N :  8.0 
 [  8 ] Test mu :   0.6370662  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6370662195941461
-----------------------------------------------------------------------

148.775783 seconds (1.14 M allocations: 316.350 MiB)
===== Calculating local green function ... =====
  8.056351 seconds (208.12 k allocations: 26.269 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.158490 seconds (176.82 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007711 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [15] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06293378040585385,1.337066219594146] ==========
 [  1 ] Test mu :  -0.0629338  ==>  Occup :   7.036056  |  target N :  8.0 
 [  2 ] Test mu :   1.3370662  ==>  Occup :   8.565123  |  target N :  8.0 
 [  3 ] Test mu :   0.8196439  ==>  Occup :   8.143481  |  target N :  8.0 
 [  4 ] Test mu :   0.7052946  ==>  Occup :   8.060586  |  target N :  8.0 
 [  5 ] Test mu :   0.6598652  ==>  Occup :   8.021899  |  target N :  8.0 
 [  6 ] Test mu :   0.6355861  ==>  Occup :   7.998896  |  target N :  8.0 
 [  7 ] Test mu :   0.6367103  ==>  Occup :   7.999983  |  target N :  8.0 
 [  8 ] Test mu :   0.6367280  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6367280220353438
-----------------------------------------------------------------------

148.851314 seconds (1.14 M allocations: 316.351 MiB)
===== Calculating local green function ... =====
  8.069144 seconds (208.16 k allocations: 26.267 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.155908 seconds (176.80 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.008805 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [16] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06327197796465611,1.3367280220353437] ==========
 [  1 ] Test mu :  -0.0632720  ==>  Occup :   7.035906  |  target N :  8.0 
 [  2 ] Test mu :   1.3367280  ==>  Occup :   8.565028  |  target N :  8.0 
 [  3 ] Test mu :   0.8194121  ==>  Occup :   8.143293  |  target N :  8.0 
 [  4 ] Test mu :   0.7051944  ==>  Occup :   8.060348  |  target N :  8.0 
 [  5 ] Test mu :   0.6599255  ==>  Occup :   8.021687  |  target N :  8.0 
 [  6 ] Test mu :   0.6359354  ==>  Occup :   7.998941  |  target N :  8.0 
 [  7 ] Test mu :   0.6370148  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6370315  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6370315186882326
-----------------------------------------------------------------------

148.902602 seconds (1.14 M allocations: 316.350 MiB)
===== Calculating local green function ... =====
  8.098355 seconds (208.19 k allocations: 26.271 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.157232 seconds (176.82 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.008053 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [17] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06296848131176735,1.3370315186882324] ==========
 [  1 ] Test mu :  -0.0629685  ==>  Occup :   7.038508  |  target N :  8.0 
 [  2 ] Test mu :   1.3370315  ==>  Occup :   8.565618  |  target N :  8.0 
 [  3 ] Test mu :   0.8184934  ==>  Occup :   8.142791  |  target N :  8.0 
 [  4 ] Test mu :   0.7045151  ==>  Occup :   8.059930  |  target N :  8.0 
 [  5 ] Test mu :   0.6594843  ==>  Occup :   8.021396  |  target N :  8.0 
 [  6 ] Test mu :   0.6358455  ==>  Occup :   7.998977  |  target N :  8.0 
 [  7 ] Test mu :   0.6368882  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6369042  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6369041861357909
-----------------------------------------------------------------------

148.926463 seconds (1.14 M allocations: 316.353 MiB)
===== Calculating local green function ... =====
  8.045220 seconds (208.14 k allocations: 26.270 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.155354 seconds (176.82 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007694 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [18] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06309581386420904,1.3369041861357909] ==========
 [  1 ] Test mu :  -0.0630958  ==>  Occup :   7.038278  |  target N :  8.0 
 [  2 ] Test mu :   1.3369042  ==>  Occup :   8.565524  |  target N :  8.0 
 [  3 ] Test mu :   0.8184977  ==>  Occup :   8.142128  |  target N :  8.0 
 [  4 ] Test mu :   0.7049870  ==>  Occup :   8.059475  |  target N :  8.0 
 [  5 ] Test mu :   0.6602535  ==>  Occup :   8.021127  |  target N :  8.0 
 [  6 ] Test mu :   0.6369363  ==>  Occup :   7.999016  |  target N :  8.0 
 [  7 ] Test mu :   0.6379404  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6379555  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6379555212638806
-----------------------------------------------------------------------

148.799205 seconds (1.14 M allocations: 316.356 MiB)
===== Calculating local green function ... =====
  8.103032 seconds (208.23 k allocations: 26.269 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.159232 seconds (176.81 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007726 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [19] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.0620444787361194,1.3379555212638805] ==========
 [  1 ] Test mu :  -0.0620445  ==>  Occup :   7.040583  |  target N :  8.0 
 [  2 ] Test mu :   1.3379555  ==>  Occup :   8.565940  |  target N :  8.0 
 [  3 ] Test mu :   0.8185256  ==>  Occup :   8.142099  |  target N :  8.0 
 [  4 ] Test mu :   0.7049295  ==>  Occup :   8.059375  |  target N :  8.0 
 [  5 ] Test mu :   0.6602301  ==>  Occup :   8.021103  |  target N :  8.0 
 [  6 ] Test mu :   0.6369095  ==>  Occup :   7.999024  |  target N :  8.0 
 [  7 ] Test mu :   0.6379068  ==>  Occup :   7.999986  |  target N :  8.0 
 [  8 ] Test mu :   0.6379216  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6379216138781586
-----------------------------------------------------------------------

148.685790 seconds (1.14 M allocations: 316.350 MiB)
===== Calculating local green function ... =====
  8.078043 seconds (208.17 k allocations: 26.271 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.155989 seconds (176.83 k allocations: 9.300 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007920 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [20] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.062078386121841356,1.3379216138781587] ==========
 [  1 ] Test mu :  -0.0620784  ==>  Occup :   7.039196  |  target N :  8.0 
 [  2 ] Test mu :   1.3379216  ==>  Occup :   8.566305  |  target N :  8.0 
 [  3 ] Test mu :   0.8187535  ==>  Occup :   8.142045  |  target N :  8.0 
 [  4 ] Test mu :   0.7053044  ==>  Occup :   8.059424  |  target N :  8.0 
 [  5 ] Test mu :   0.6606074  ==>  Occup :   8.021033  |  target N :  8.0 
 [  6 ] Test mu :   0.6374344  ==>  Occup :   7.999039  |  target N :  8.0 
 [  7 ] Test mu :   0.6384143  ==>  Occup :   7.999986  |  target N :  8.0 
 [  8 ] Test mu :   0.6384293  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6384292811971761
-----------------------------------------------------------------------

148.690317 seconds (1.14 M allocations: 316.355 MiB)
===== Calculating local green function ... =====
  8.060144 seconds (208.19 k allocations: 26.271 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.152754 seconds (176.82 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007942 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [21] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06157071880282383,1.338429281197176] ==========
 [  1 ] Test mu :  -0.0615707  ==>  Occup :   7.040614  |  target N :  8.0 
 [  2 ] Test mu :   1.3384293  ==>  Occup :   8.566208  |  target N :  8.0 
 [  3 ] Test mu :   0.8188342  ==>  Occup :   8.142103  |  target N :  8.0 
 [  4 ] Test mu :   0.7052534  ==>  Occup :   8.059418  |  target N :  8.0 
 [  5 ] Test mu :   0.6605315  ==>  Occup :   8.021135  |  target N :  8.0 
 [  6 ] Test mu :   0.6371727  ==>  Occup :   7.999019  |  target N :  8.0 
 [  7 ] Test mu :   0.6381746  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6381897  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6381897017878241
-----------------------------------------------------------------------

148.768559 seconds (1.14 M allocations: 316.357 MiB)
===== Calculating local green function ... =====
  8.060397 seconds (208.14 k allocations: 26.267 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.153633 seconds (176.81 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007620 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [22] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.061810298212175874,1.3381897017878241] ==========
 [  1 ] Test mu :  -0.0618103  ==>  Occup :   7.037607  |  target N :  8.0 
 [  2 ] Test mu :   1.3381897  ==>  Occup :   8.566156  |  target N :  8.0 
 [  3 ] Test mu :   0.8196474  ==>  Occup :   8.142085  |  target N :  8.0 
 [  4 ] Test mu :   0.7062529  ==>  Occup :   8.059585  |  target N :  8.0 
 [  5 ] Test mu :   0.6614722  ==>  Occup :   8.021284  |  target N :  8.0 
 [  6 ] Test mu :   0.6379388  ==>  Occup :   7.999000  |  target N :  8.0 
 [  7 ] Test mu :   0.6389599  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6389756  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6389755738699799
-----------------------------------------------------------------------

148.690539 seconds (1.14 M allocations: 316.351 MiB)
===== Calculating local green function ... =====
  8.072308 seconds (208.15 k allocations: 26.270 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.151407 seconds (176.81 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007688 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [23] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.061024426130020015,1.33897557386998] ==========
 [  1 ] Test mu :  -0.0610244  ==>  Occup :   7.041300  |  target N :  8.0 
 [  2 ] Test mu :   1.3389756  ==>  Occup :   8.566778  |  target N :  8.0 
 [  3 ] Test mu :   0.8188177  ==>  Occup :   8.142034  |  target N :  8.0 
 [  4 ] Test mu :   0.7052859  ==>  Occup :   8.059476  |  target N :  8.0 
 [  5 ] Test mu :   0.6605224  ==>  Occup :   8.021189  |  target N :  8.0 
 [  6 ] Test mu :   0.6370902  ==>  Occup :   7.998968  |  target N :  8.0 
 [  7 ] Test mu :   0.6381417  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6381576  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6381575818217888
-----------------------------------------------------------------------

148.763341 seconds (1.14 M allocations: 316.351 MiB)
===== Calculating local green function ... =====
  8.157711 seconds (208.20 k allocations: 26.272 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.159094 seconds (176.82 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007599 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [24] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06184241817821112,1.3381575818217888] ==========
 [  1 ] Test mu :  -0.0618424  ==>  Occup :   7.040354  |  target N :  8.0 
 [  2 ] Test mu :   1.3381576  ==>  Occup :   8.565922  |  target N :  8.0 
 [  3 ] Test mu :   0.8188159  ==>  Occup :   8.143001  |  target N :  8.0 
 [  4 ] Test mu :   0.7046037  ==>  Occup :   8.060013  |  target N :  8.0 
 [  5 ] Test mu :   0.6594933  ==>  Occup :   8.021524  |  target N :  8.0 
 [  6 ] Test mu :   0.6356522  ==>  Occup :   7.998928  |  target N :  8.0 
 [  7 ] Test mu :   0.6367442  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6367607  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6367607485689127
-----------------------------------------------------------------------

148.792886 seconds (1.14 M allocations: 316.359 MiB)
===== Calculating local green function ... =====
  8.063510 seconds (208.21 k allocations: 26.269 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.166263 seconds (176.83 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007915 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [25] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06323925143108722,1.3367607485689126] ==========
 [  1 ] Test mu :  -0.0632393  ==>  Occup :   7.038137  |  target N :  8.0 
 [  2 ] Test mu :   1.3367607  ==>  Occup :   8.564826  |  target N :  8.0 
 [  3 ] Test mu :   0.8188050  ==>  Occup :   8.143064  |  target N :  8.0 
 [  4 ] Test mu :   0.7045999  ==>  Occup :   8.060024  |  target N :  8.0 
 [  5 ] Test mu :   0.6594982  ==>  Occup :   8.021486  |  target N :  8.0 
 [  6 ] Test mu :   0.6357299  ==>  Occup :   7.998929  |  target N :  8.0 
 [  7 ] Test mu :   0.6368202  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6368367  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6368366923040143
-----------------------------------------------------------------------

148.757987 seconds (1.14 M allocations: 316.353 MiB)
===== Calculating local green function ... =====
  8.086438 seconds (208.22 k allocations: 26.272 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.158305 seconds (176.81 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007808 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [26] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06316330769598566,1.3368366923040143] ==========
 [  1 ] Test mu :  -0.0631633  ==>  Occup :   7.036252  |  target N :  8.0 
 [  2 ] Test mu :   1.3368367  ==>  Occup :   8.564778  |  target N :  8.0 
 [  3 ] Test mu :   0.8195474  ==>  Occup :   8.142537  |  target N :  8.0 
 [  4 ] Test mu :   0.7058169  ==>  Occup :   8.059736  |  target N :  8.0 
 [  5 ] Test mu :   0.6609349  ==>  Occup :   8.021389  |  target N :  8.0 
 [  6 ] Test mu :   0.6372629  ==>  Occup :   7.998971  |  target N :  8.0 
 [  7 ] Test mu :   0.6383130  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6383287  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6383287482041925
-----------------------------------------------------------------------

148.644299 seconds (1.14 M allocations: 316.352 MiB)
===== Calculating local green function ... =====
  8.081739 seconds (208.19 k allocations: 26.271 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.156419 seconds (176.82 k allocations: 9.297 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007634 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [27] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06167125179580746,1.3383287482041926] ==========
 [  1 ] Test mu :  -0.0616713  ==>  Occup :   7.039518  |  target N :  8.0 
 [  2 ] Test mu :   1.3383287  ==>  Occup :   8.565735  |  target N :  8.0 
 [  3 ] Test mu :   0.8193790  ==>  Occup :   8.142781  |  target N :  8.0 
 [  4 ] Test mu :   0.7053559  ==>  Occup :   8.059918  |  target N :  8.0 
 [  5 ] Test mu :   0.6603161  ==>  Occup :   8.021433  |  target N :  8.0 
 [  6 ] Test mu :   0.6366041  ==>  Occup :   7.998954  |  target N :  8.0 
 [  7 ] Test mu :   0.6376703  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6376867  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6376866613050178
-----------------------------------------------------------------------

148.621695 seconds (1.14 M allocations: 316.363 MiB)
===== Calculating local green function ... =====
  8.051033 seconds (208.16 k allocations: 26.267 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.169191 seconds (176.83 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007766 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [28] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06231333869498212,1.3376866613050178] ==========
 [  1 ] Test mu :  -0.0623133  ==>  Occup :   7.036736  |  target N :  8.0 
 [  2 ] Test mu :   1.3376867  ==>  Occup :   8.565888  |  target N :  8.0 
 [  3 ] Test mu :   0.8195937  ==>  Occup :   8.142338  |  target N :  8.0 
 [  4 ] Test mu :   0.7060550  ==>  Occup :   8.059758  |  target N :  8.0 
 [  5 ] Test mu :   0.6611725  ==>  Occup :   8.021336  |  target N :  8.0 
 [  6 ] Test mu :   0.6376040  ==>  Occup :   7.998997  |  target N :  8.0 
 [  7 ] Test mu :   0.6386271  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6386429  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6386429293536824
-----------------------------------------------------------------------

148.738101 seconds (1.14 M allocations: 316.354 MiB)
===== Calculating local green function ... =====
  8.082120 seconds (208.20 k allocations: 26.271 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.163442 seconds (176.85 k allocations: 9.301 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007781 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [29] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06135707064631757,1.3386429293536823] ==========
 [  1 ] Test mu :  -0.0613571  ==>  Occup :   7.039780  |  target N :  8.0 
 [  2 ] Test mu :   1.3386429  ==>  Occup :   8.565982  |  target N :  8.0 
 [  3 ] Test mu :   0.8194622  ==>  Occup :   8.142482  |  target N :  8.0 
 [  4 ] Test mu :   0.7056505  ==>  Occup :   8.059728  |  target N :  8.0 
 [  5 ] Test mu :   0.6607347  ==>  Occup :   8.021378  |  target N :  8.0 
 [  6 ] Test mu :   0.6370621  ==>  Occup :   7.998983  |  target N :  8.0 
 [  7 ] Test mu :   0.6381016  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6381173  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6381172961966994
-----------------------------------------------------------------------

148.708475 seconds (1.14 M allocations: 316.357 MiB)
===== Calculating local green function ... =====
  8.093319 seconds (208.20 k allocations: 26.272 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.159851 seconds (176.82 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007569 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [30] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06188270380330052,1.3381172961966994] ==========
 [  1 ] Test mu :  -0.0618827  ==>  Occup :   7.040890  |  target N :  8.0 
 [  2 ] Test mu :   1.3381173  ==>  Occup :   8.565679  |  target N :  8.0 
 [  3 ] Test mu :   0.8187336  ==>  Occup :   8.142379  |  target N :  8.0 
 [  4 ] Test mu :   0.7049051  ==>  Occup :   8.059486  |  target N :  8.0 
 [  5 ] Test mu :   0.6601242  ==>  Occup :   8.021173  |  target N :  8.0 
 [  6 ] Test mu :   0.6367126  ==>  Occup :   7.999008  |  target N :  8.0 
 [  7 ] Test mu :   0.6377263  ==>  Occup :   7.999986  |  target N :  8.0 
 [  8 ] Test mu :   0.6377413  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6377413151792622
-----------------------------------------------------------------------

148.784528 seconds (1.14 M allocations: 316.351 MiB)
===== Calculating local green function ... =====
  8.062428 seconds (208.21 k allocations: 26.269 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.152684 seconds (176.81 k allocations: 9.297 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007508 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [31] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06225868482073771,1.337741315179262] ==========
 [  1 ] Test mu :  -0.0622587  ==>  Occup :   7.039235  |  target N :  8.0 
 [  2 ] Test mu :   1.3377413  ==>  Occup :   8.565167  |  target N :  8.0 
 [  3 ] Test mu :   0.8192158  ==>  Occup :   8.142780  |  target N :  8.0 
 [  4 ] Test mu :   0.7051675  ==>  Occup :   8.059825  |  target N :  8.0 
 [  5 ] Test mu :   0.6601824  ==>  Occup :   8.021399  |  target N :  8.0 
 [  6 ] Test mu :   0.6364965  ==>  Occup :   7.998929  |  target N :  8.0 
 [  7 ] Test mu :   0.6375874  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6376038  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6376037562518614
-----------------------------------------------------------------------

148.710669 seconds (1.14 M allocations: 316.352 MiB)
===== Calculating local green function ... =====
  8.090592 seconds (208.20 k allocations: 26.272 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.158789 seconds (176.82 k allocations: 9.300 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007654 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [32] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06239624374813857,1.3376037562518612] ==========
 [  1 ] Test mu :  -0.0623962  ==>  Occup :   7.037710  |  target N :  8.0 
 [  2 ] Test mu :   1.3376038  ==>  Occup :   8.565151  |  target N :  8.0 
 [  3 ] Test mu :   0.8196060  ==>  Occup :   8.142495  |  target N :  8.0 
 [  4 ] Test mu :   0.7058447  ==>  Occup :   8.059654  |  target N :  8.0 
 [  5 ] Test mu :   0.6610002  ==>  Occup :   8.021225  |  target N :  8.0 
 [  6 ] Test mu :   0.6375695  ==>  Occup :   7.998959  |  target N :  8.0 
 [  7 ] Test mu :   0.6386285  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6386445  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6386445095549711
-----------------------------------------------------------------------

148.660869 seconds (1.14 M allocations: 316.353 MiB)
===== Calculating local green function ... =====
  8.075284 seconds (208.21 k allocations: 26.272 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.165739 seconds (176.83 k allocations: 9.300 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007587 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [33] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06135549044502886,1.338644509554971] ==========
 [  1 ] Test mu :  -0.0613555  ==>  Occup :   7.038808  |  target N :  8.0 
 [  2 ] Test mu :   1.3386445  ==>  Occup :   8.565611  |  target N :  8.0 
 [  3 ] Test mu :   0.8200084  ==>  Occup :   8.142891  |  target N :  8.0 
 [  4 ] Test mu :   0.7059419  ==>  Occup :   8.059984  |  target N :  8.0 
 [  5 ] Test mu :   0.6608707  ==>  Occup :   8.021390  |  target N :  8.0 
 [  6 ] Test mu :   0.6372551  ==>  Occup :   7.998925  |  target N :  8.0 
 [  7 ] Test mu :   0.6383466  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6383634  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.638363406822975
-----------------------------------------------------------------------

148.857994 seconds (1.14 M allocations: 316.354 MiB)
===== Calculating local green function ... =====
  8.100767 seconds (208.14 k allocations: 26.267 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.159463 seconds (176.82 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.008984 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [34] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06163659317702497,1.338363406822975] ==========
 [  1 ] Test mu :  -0.0616366  ==>  Occup :   7.036953  |  target N :  8.0 
 [  2 ] Test mu :   1.3383634  ==>  Occup :   8.565427  |  target N :  8.0 
 [  3 ] Test mu :   0.8204623  ==>  Occup :   8.142599  |  target N :  8.0 
 [  4 ] Test mu :   0.7066954  ==>  Occup :   8.059891  |  target N :  8.0 
 [  5 ] Test mu :   0.6617108  ==>  Occup :   8.021501  |  target N :  8.0 
 [  6 ] Test mu :   0.6378969  ==>  Occup :   7.998962  |  target N :  8.0 
 [  7 ] Test mu :   0.6389570  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6389732  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6389732371803105
-----------------------------------------------------------------------

148.631776 seconds (1.14 M allocations: 316.351 MiB)
===== Calculating local green function ... =====
  8.082473 seconds (208.22 k allocations: 26.272 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.155794 seconds (176.82 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007553 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [35] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06102676281968944,1.3389732371803105] ==========
 [  1 ] Test mu :  -0.0610268  ==>  Occup :   7.041086  |  target N :  8.0 
 [  2 ] Test mu :   1.3389732  ==>  Occup :   8.565557  |  target N :  8.0 
 [  3 ] Test mu :   0.8195937  ==>  Occup :   8.142863  |  target N :  8.0 
 [  4 ] Test mu :   0.7054068  ==>  Occup :   8.059825  |  target N :  8.0 
 [  5 ] Test mu :   0.6603982  ==>  Occup :   8.021388  |  target N :  8.0 
 [  6 ] Test mu :   0.6367201  ==>  Occup :   7.998932  |  target N :  8.0 
 [  7 ] Test mu :   0.6378083  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6378246  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6378246321547679
-----------------------------------------------------------------------

148.698157 seconds (1.14 M allocations: 316.351 MiB)
===== Calculating local green function ... =====
  8.078216 seconds (208.21 k allocations: 26.272 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.159761 seconds (176.82 k allocations: 9.297 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007831 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [36] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06217536784523203,1.337824632154768] ==========
 [  1 ] Test mu :  -0.0621754  ==>  Occup :   7.036552  |  target N :  8.0 
 [  2 ] Test mu :   1.3378246  ==>  Occup :   8.565287  |  target N :  8.0 
 [  3 ] Test mu :   0.8201405  ==>  Occup :   8.142112  |  target N :  8.0 
 [  4 ] Test mu :   0.7067250  ==>  Occup :   8.059469  |  target N :  8.0 
 [  5 ] Test mu :   0.6620236  ==>  Occup :   8.021229  |  target N :  8.0 
 [  6 ] Test mu :   0.6385477  ==>  Occup :   7.999016  |  target N :  8.0 
 [  7 ] Test mu :   0.6395540  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6395693  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6395692574453017
-----------------------------------------------------------------------

148.696937 seconds (1.14 M allocations: 316.357 MiB)
===== Calculating local green function ... =====
  8.078335 seconds (208.16 k allocations: 26.267 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.152585 seconds (176.81 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007654 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [37] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06043074255469827,1.3395692574453015] ==========
 [  1 ] Test mu :  -0.0604307  ==>  Occup :   7.041683  |  target N :  8.0 
 [  2 ] Test mu :   1.3395693  ==>  Occup :   8.566074  |  target N :  8.0 
 [  3 ] Test mu :   0.8196871  ==>  Occup :   8.142387  |  target N :  8.0 
 [  4 ] Test mu :   0.7058348  ==>  Occup :   8.059548  |  target N :  8.0 
 [  5 ] Test mu :   0.6610059  ==>  Occup :   8.021302  |  target N :  8.0 
 [  6 ] Test mu :   0.6373938  ==>  Occup :   7.998982  |  target N :  8.0 
 [  7 ] Test mu :   0.6384348  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6384503  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6384502781382884
-----------------------------------------------------------------------

148.791927 seconds (1.14 M allocations: 316.353 MiB)
===== Calculating local green function ... =====
  8.055039 seconds (208.16 k allocations: 26.270 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.157002 seconds (176.82 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007610 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [38] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06154972186171159,1.3384502781382883] ==========
 [  1 ] Test mu :  -0.0615497  ==>  Occup :   7.038127  |  target N :  8.0 
 [  2 ] Test mu :   1.3384503  ==>  Occup :   8.565341  |  target N :  8.0 
 [  3 ] Test mu :   0.8202006  ==>  Occup :   8.143640  |  target N :  8.0 
 [  4 ] Test mu :   0.7056342  ==>  Occup :   8.060487  |  target N :  8.0 
 [  5 ] Test mu :   0.6602442  ==>  Occup :   8.021867  |  target N :  8.0 
 [  6 ] Test mu :   0.6359776  ==>  Occup :   7.998901  |  target N :  8.0 
 [  7 ] Test mu :   0.6370985  ==>  Occup :   7.999983  |  target N :  8.0 
 [  8 ] Test mu :   0.6371158  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6371158154198697
-----------------------------------------------------------------------

148.809361 seconds (1.14 M allocations: 316.351 MiB)
===== Calculating local green function ... =====
  8.068879 seconds (208.19 k allocations: 26.271 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.157213 seconds (176.83 k allocations: 9.301 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007730 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [39] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06288418458013023,1.3371158154198697] ==========
 [  1 ] Test mu :  -0.0628842  ==>  Occup :   7.034855  |  target N :  8.0 
 [  2 ] Test mu :   1.3371158  ==>  Occup :   8.565185  |  target N :  8.0 
 [  3 ] Test mu :   0.8200645  ==>  Occup :   8.142785  |  target N :  8.0 
 [  4 ] Test mu :   0.7062738  ==>  Occup :   8.059945  |  target N :  8.0 
 [  5 ] Test mu :   0.6612948  ==>  Occup :   8.021478  |  target N :  8.0 
 [  6 ] Test mu :   0.6375531  ==>  Occup :   7.999007  |  target N :  8.0 
 [  7 ] Test mu :   0.6385678  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6385834  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6385834148089641
-----------------------------------------------------------------------

148.865866 seconds (1.14 M allocations: 316.355 MiB)
===== Calculating local green function ... =====
  8.078032 seconds (208.16 k allocations: 26.267 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.158983 seconds (176.81 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.008998 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [40] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06141658519103588,1.338583414808964] ==========
 [  1 ] Test mu :  -0.0614166  ==>  Occup :   7.038446  |  target N :  8.0 
 [  2 ] Test mu :   1.3385834  ==>  Occup :   8.566239  |  target N :  8.0 
 [  3 ] Test mu :   0.8197079  ==>  Occup :   8.142441  |  target N :  8.0 
 [  4 ] Test mu :   0.7060222  ==>  Occup :   8.059696  |  target N :  8.0 
 [  5 ] Test mu :   0.6611624  ==>  Occup :   8.021252  |  target N :  8.0 
 [  6 ] Test mu :   0.6377073  ==>  Occup :   7.999008  |  target N :  8.0 
 [  7 ] Test mu :   0.6387187  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6387342  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6387342055824554
-----------------------------------------------------------------------

148.684610 seconds (1.14 M allocations: 316.354 MiB)
===== Calculating local green function ... =====
  8.046163 seconds (208.20 k allocations: 26.272 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.168886 seconds (176.83 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007871 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [41] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06126579441754454,1.3387342055824554] ==========
 [  1 ] Test mu :  -0.0612658  ==>  Occup :   7.038674  |  target N :  8.0 
 [  2 ] Test mu :   1.3387342  ==>  Occup :   8.566688  |  target N :  8.0 
 [  3 ] Test mu :   0.8195227  ==>  Occup :   8.141972  |  target N :  8.0 
 [  4 ] Test mu :   0.7061828  ==>  Occup :   8.059531  |  target N :  8.0 
 [  5 ] Test mu :   0.6614291  ==>  Occup :   8.021267  |  target N :  8.0 
 [  6 ] Test mu :   0.6379056  ==>  Occup :   7.999011  |  target N :  8.0 
 [  7 ] Test mu :   0.6389166  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6389321  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6389320849817981
-----------------------------------------------------------------------

148.783484 seconds (1.14 M allocations: 316.353 MiB)
===== Calculating local green function ... =====
  8.104034 seconds (208.14 k allocations: 26.270 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.157436 seconds (176.82 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007651 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [42] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06106791501820186,1.338932084981798] ==========
 [  1 ] Test mu :  -0.0610679  ==>  Occup :   7.040427  |  target N :  8.0 
 [  2 ] Test mu :   1.3389321  ==>  Occup :   8.566709  |  target N :  8.0 
 [  3 ] Test mu :   0.8191116  ==>  Occup :   8.142545  |  target N :  8.0 
 [  4 ] Test mu :   0.7052719  ==>  Occup :   8.059838  |  target N :  8.0 
 [  5 ] Test mu :   0.6602885  ==>  Occup :   8.021418  |  target N :  8.0 
 [  6 ] Test mu :   0.6365836  ==>  Occup :   7.998967  |  target N :  8.0 
 [  7 ] Test mu :   0.6376373  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6376536  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6376535695411193
-----------------------------------------------------------------------

148.852567 seconds (1.14 M allocations: 316.355 MiB)
===== Calculating local green function ... =====
  8.050792 seconds (208.14 k allocations: 26.266 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.159899 seconds (176.82 k allocations: 9.300 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.008043 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [43] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.062346430458880664,1.3376535695411191] ==========
 [  1 ] Test mu :  -0.0623464  ==>  Occup :   7.038479  |  target N :  8.0 
 [  2 ] Test mu :   1.3376536  ==>  Occup :   8.566250  |  target N :  8.0 
 [  3 ] Test mu :   0.8187599  ==>  Occup :   8.141949  |  target N :  8.0 
 [  4 ] Test mu :   0.7054157  ==>  Occup :   8.059462  |  target N :  8.0 
 [  5 ] Test mu :   0.6607012  ==>  Occup :   8.021176  |  target N :  8.0 
 [  6 ] Test mu :   0.6373052  ==>  Occup :   7.999012  |  target N :  8.0 
 [  7 ] Test mu :   0.6383144  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6383297  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6383297068325429
-----------------------------------------------------------------------

148.789376 seconds (1.14 M allocations: 316.357 MiB)
===== Calculating local green function ... =====
  8.112597 seconds (208.24 k allocations: 26.273 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.152070 seconds (176.81 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007812 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [44] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06167029316745709,1.3383297068325428] ==========
 [  1 ] Test mu :  -0.0616703  ==>  Occup :   7.041199  |  target N :  8.0 
 [  2 ] Test mu :   1.3383297  ==>  Occup :   8.566135  |  target N :  8.0 
 [  3 ] Test mu :   0.8185778  ==>  Occup :   8.142631  |  target N :  8.0 
 [  4 ] Test mu :   0.7045883  ==>  Occup :   8.059743  |  target N :  8.0 
 [  5 ] Test mu :   0.6596433  ==>  Occup :   8.021367  |  target N :  8.0 
 [  6 ] Test mu :   0.6359840  ==>  Occup :   7.998979  |  target N :  8.0 
 [  7 ] Test mu :   0.6370269  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6370427  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6370426581694302
-----------------------------------------------------------------------

148.712432 seconds (1.14 M allocations: 316.355 MiB)
===== Calculating local green function ... =====
  8.043373 seconds (208.17 k allocations: 26.271 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.157763 seconds (176.82 k allocations: 9.299 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.008136 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [45] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06295734183056978,1.3370426581694301] ==========
 [  1 ] Test mu :  -0.0629573  ==>  Occup :   7.036519  |  target N :  8.0 
 [  2 ] Test mu :   1.3370427  ==>  Occup :   8.564618  |  target N :  8.0 
 [  3 ] Test mu :   0.8197561  ==>  Occup :   8.143574  |  target N :  8.0 
 [  4 ] Test mu :   0.7052766  ==>  Occup :   8.060427  |  target N :  8.0 
 [  5 ] Test mu :   0.6599388  ==>  Occup :   8.021838  |  target N :  8.0 
 [  6 ] Test mu :   0.6357082  ==>  Occup :   7.998888  |  target N :  8.0 
 [  7 ] Test mu :   0.6368408  ==>  Occup :   7.999983  |  target N :  8.0 
 [  8 ] Test mu :   0.6368582  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6368582173453982
-----------------------------------------------------------------------

148.748725 seconds (1.14 M allocations: 316.353 MiB)
===== Calculating local green function ... =====
  8.059145 seconds (208.14 k allocations: 26.267 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.178275 seconds (176.84 k allocations: 9.301 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.010189 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [46] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.0631417826546018,1.336858217345398] ==========
 [  1 ] Test mu :  -0.0631418  ==>  Occup :   7.033616  |  target N :  8.0 
 [  2 ] Test mu :   1.3368582  ==>  Occup :   8.565364  |  target N :  8.0 
 [  3 ] Test mu :   0.8201219  ==>  Occup :   8.142734  |  target N :  8.0 
 [  4 ] Test mu :   0.7064530  ==>  Occup :   8.060180  |  target N :  8.0 
 [  5 ] Test mu :   0.6613375  ==>  Occup :   8.021690  |  target N :  8.0 
 [  6 ] Test mu :   0.6373188  ==>  Occup :   7.998951  |  target N :  8.0 
 [  7 ] Test mu :   0.6383891  ==>  Occup :   7.999984  |  target N :  8.0 
 [  8 ] Test mu :   0.6384060  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6384059877315346
-----------------------------------------------------------------------

148.484441 seconds (1.14 M allocations: 316.352 MiB)
===== Calculating local green function ... =====
  8.053300 seconds (208.17 k allocations: 26.271 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.160962 seconds (176.83 k allocations: 9.300 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007764 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [47] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06159401226846539,1.3384059877315346] ==========
 [  1 ] Test mu :  -0.0615940  ==>  Occup :   7.038674  |  target N :  8.0 
 [  2 ] Test mu :   1.3384060  ==>  Occup :   8.566271  |  target N :  8.0 
 [  3 ] Test mu :   0.8194339  ==>  Occup :   8.142490  |  target N :  8.0 
 [  4 ] Test mu :   0.7057034  ==>  Occup :   8.059837  |  target N :  8.0 
 [  5 ] Test mu :   0.6607418  ==>  Occup :   8.021413  |  target N :  8.0 
 [  6 ] Test mu :   0.6370561  ==>  Occup :   7.999005  |  target N :  8.0 
 [  7 ] Test mu :   0.6380736  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6380892  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6380892375704484
-----------------------------------------------------------------------

148.773054 seconds (1.14 M allocations: 316.356 MiB)
===== Calculating local green function ... =====
  8.060046 seconds (208.19 k allocations: 26.271 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.158002 seconds (176.81 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007780 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [48] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.061910762429551514,1.3380892375704483] ==========
 [  1 ] Test mu :  -0.0619108  ==>  Occup :   7.037813  |  target N :  8.0 
 [  2 ] Test mu :   1.3380892  ==>  Occup :   8.566398  |  target N :  8.0 
 [  3 ] Test mu :   0.8193369  ==>  Occup :   8.142222  |  target N :  8.0 
 [  4 ] Test mu :   0.7058528  ==>  Occup :   8.059712  |  target N :  8.0 
 [  5 ] Test mu :   0.6609909  ==>  Occup :   8.021328  |  target N :  8.0 
 [  6 ] Test mu :   0.6374196  ==>  Occup :   7.999010  |  target N :  8.0 
 [  7 ] Test mu :   0.6384306  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6384462  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6384462067698988
-----------------------------------------------------------------------

148.798924 seconds (1.14 M allocations: 316.355 MiB)
===== Calculating local green function ... =====
  8.077183 seconds (208.16 k allocations: 26.267 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.157759 seconds (176.82 k allocations: 9.297 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007569 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [49] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06155379323010113,1.3384462067698988] ==========
 [  1 ] Test mu :  -0.0615538  ==>  Occup :   7.042105  |  target N :  8.0 
 [  2 ] Test mu :   1.3384462  ==>  Occup :   8.566414  |  target N :  8.0 
 [  3 ] Test mu :   0.8182239  ==>  Occup :   8.142555  |  target N :  8.0 
 [  4 ] Test mu :   0.7042554  ==>  Occup :   8.059730  |  target N :  8.0 
 [  5 ] Test mu :   0.6593059  ==>  Occup :   8.021354  |  target N :  8.0 
 [  6 ] Test mu :   0.6356583  ==>  Occup :   7.998977  |  target N :  8.0 
 [  7 ] Test mu :   0.6367036  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6367194  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6367193748155646
-----------------------------------------------------------------------

148.966165 seconds (1.14 M allocations: 316.349 MiB)
===== Calculating local green function ... =====
  8.059631 seconds (208.18 k allocations: 26.271 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.156096 seconds (176.82 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007916 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries

       ============================
          DMFT_loop [50] 
       ============================

Reading SelfE_w ... imp[1]

          ===== Finding mu ... =====
========= Chemical potential finding in range [-0.06328062518443534,1.3367193748155646] ==========
 [  1 ] Test mu :  -0.0632806  ==>  Occup :   7.038097  |  target N :  8.0 
 [  2 ] Test mu :   1.3367194  ==>  Occup :   8.565435  |  target N :  8.0 
 [  3 ] Test mu :   0.8184263  ==>  Occup :   8.142190  |  target N :  8.0 
 [  4 ] Test mu :   0.7048763  ==>  Occup :   8.059489  |  target N :  8.0 
 [  5 ] Test mu :   0.6601365  ==>  Occup :   8.021166  |  target N :  8.0 
 [  6 ] Test mu :   0.6367584  ==>  Occup :   7.999014  |  target N :  8.0 
 [  7 ] Test mu :   0.6377650  ==>  Occup :   7.999985  |  target N :  8.0 
 [  8 ] Test mu :   0.6377801  ==>  Occup :   8.000000  |  target N :  8.0 
-----------------------------------------------------------------------
          Chemical potential is founded :0.6377800715610809
-----------------------------------------------------------------------

148.802571 seconds (1.14 M allocations: 316.356 MiB)
===== Calculating local green function ... =====
  8.041909 seconds (208.15 k allocations: 26.270 MiB)

===== Calculating weiss field from G_loc_iWn ... =====
  0.156280 seconds (176.82 k allocations: 9.298 MiB)

===== Calculating hybrid function from weiss field ... =====
  0.007836 seconds (96.37 k allocations: 7.295 MiB)

Writing hyb.json ...
Writing hyb.json ...



 CTQMC run ... imp[1]
 Preparing the input file of EDFMTF : actqmc.cix ...
0.0
Br: kindx= [(7, 3), (9, 1), (5, -5), (7, -1), (6, 2), (3, -3), (5, 1), (1, -1), (4, -2), (4, 0), (3, 3), (6, -4), (4, 4), (8, -2), (7, -3), (2, 2), (10, 0), (5, 3), (1, 1), (5, -1), (6, 4), (0, 0), (8, 2), (7, 1), (2, -2), (6, 0), (9, -1), (8, 0), (4, 2), (5, -3), (5, 5), (4, -4), (3, 1), (3, -1), (6, -2), (2, 0)]
Br: Stage1: Computing F^ in direct base
Br: Stage2: Compressing F^+ according to its block diagonal form
Br: Stage3: Renumbers states -- creates superstates for ctqmc
Br: Stage4: F^dagger matrices between superstates evaluated
Have HB2
Number of operators needed 1  0
off_diagonal=0
Reading data with 1436 entries
